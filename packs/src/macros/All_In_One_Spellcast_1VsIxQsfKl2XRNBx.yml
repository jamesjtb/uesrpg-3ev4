name: All-In-One Spellcast
type: script
author: qHu63cXcLaUEJKkt
img: icons/sundries/books/book-open-purple.webp
scope: global
command: >-
  //Select Spell to Cast

  const allSpells = token.actor.items.filter(i => i.type === "spell");


  //Sort Alphabetically

  allSpells.sort(function (a,b) {
      let nameA = a.name.toUpperCase();
      let nameB = b.name.toUpperCase();

      if (nameA < nameB){
          return -1
      } if (nameA > nameB){
          return 1
      } return 0
  });


  //Spell Data Arrays

  const alterationSpells = [];

  const conjurationSpells = [];

  const destructionSpells = [];

  const illusionSpells = [];

  const mysticismSpells = [];

  const necromancySpells = [];

  const restorationSpells = [];


  //Spell Option HTML Array

  const alterationOptions = [];

  const conjurationOptions = [];

  const destructionOptions = [];

  const illusionOptions = [];

  const mysticismOptions = [];

  const necromancyOptions = [];

  const restorationOptions = [];


  //Magic School Options

  const schoolOptions = [];


  //Push spells into Data Arrays and Option Arrays

  for (let spell of allSpells){
      let school = spell.system.school;

      if (school === "alteration"){
          let option = `<option>${spell.name}</option>`;
          alterationOptions.push(option);
          alterationSpells.push(spell);
      } else if (school === "conjuration"){
          let option = `<option>${spell.name}</option>`;
          conjurationOptions.push(option);
          conjurationSpells.push(spell);
      } else if (school === "destruction"){
          let option = `<option>${spell.name}</option>`;
          destructionOptions.push(option);
          destructionSpells.push(spell);
      } else if (school === "illusion"){
          let option = `<option>${spell.name}</option>`;
          illusionOptions.push(option);
          illusionSpells.push(spell);
      } else if (school === "mysticism"){
          let option = `<option>${spell.name}</option>`;
          mysticismOptions.push(option);
          mysticismSpells.push(spell);
      } else if (school === "necromancy"){
          let option = `<option>${spell.name}</option>`;
          necromancyOptions.push(option);
          necromancySpells.push(spell);
      } else if (school === "restoration"){
          let option = `<option>${spell.name}</option>`;
          restorationOptions.push(option);
          restorationSpells.push(spell);
      }
  }


  //Create Options for Schools if Character has spells in that school

  if (alterationSpells.length > 0){
      let schoolChoice = `<option>Alteration</option>`;
      schoolOptions.push(schoolChoice);
  }

  if (conjurationSpells.length > 0){
      let schoolChoice = `<option>Conjuration</option>`;
      schoolOptions.push(schoolChoice);
  }

  if (destructionSpells.length > 0){
      let schoolChoice = `<option>Destruction</option>`;
      schoolOptions.push(schoolChoice);
  }

  if (illusionSpells.length > 0){
      let schoolChoice = `<option>Illusion</option>`;
      schoolOptions.push(schoolChoice);
  }

  if (mysticismSpells.length > 0){
      let schoolChoice = `<option>Mysticism</option>`;
      schoolOptions.push(schoolChoice);
  }

  if (necromancySpells.length > 0){
      let schoolChoice = `<option>Necromancy</option>`;
      schoolOptions.push(schoolChoice);
  }

  if (restorationSpells.length > 0){
      let schoolChoice = `<option>Restoration</option>`;
      schoolOptions.push(schoolChoice);
  }


  //Search for Talents that affect Spellcasting Costs

  const hasCreative = token.actor.items.find(i => i.type === "talent" && i.name
  === "Creative") ? true : false;

  const hasForceOfWill = token.actor.items.find(i => i.type === "talent" &&
  i.name === "Force of Will") ? true : false;

  const hasMethodical = token.actor.items.find(i => i.type === "talent" &&
  i.name === "Methodical") ? true : false;

  const hasOvercharge = token.actor.items.find(i => i.type === "talent" &&
  i.name === "Overcharge") ? true : false;

  const hasMagickaCycling = token.actor.items.find(i => i.type === "talent" &&
  i.name === "Magicka Cycling") ? true : false;


  //Add options in Dialog based on Talents and Traits

  let overchargeOption = "";

  let magickaCyclingOption = "";


  if (hasOvercharge){
      overchargeOption = `<div>
                              <label>
                                  <input type="checkbox" id="Overcharge"/>
                                  <b>Overcharge:</b> <i>Roll damage twice and use highest value (spell cost doubled)</i>
                              </label>
                          </div>`
  }


  if (hasMagickaCycling){
      magickaCyclingOption = `<div>
                          <label>
                              <input type="checkbox" id="MagickaCycling"/>
                              <b>Magicka Cycling:</b> <i>Restraint value x2, but backfire on failure<i>
                          </label>
                        </div>`
  }


  const d = new Dialog({
      title: "Select School",
      content: `<form>
                  <div style="text-align: center;">

                      <div>
                          <h2>Select School of Magic</h2>
                          <select id="schoolSelect">
                              ${schoolOptions.join("")}
                          </select>
                      </div>
                      <hr>

                  </div>
                </form>`,
      buttons: {
          one: {
              label: "Submit",
              callback: html => {
                  const schoolSelect = (html.find(`[id="schoolSelect"]`).val().toLowerCase() + "Options");
                  const schoolSelectName = html.find(`[id="schoolSelect"]`).val();
                  let option = "";

                  if (schoolSelect == "alterationOptions"){
                      option = alterationOptions;
                  } else if (schoolSelect == "conjurationOptions"){
                      option = conjurationOptions;
                  } else if (schoolSelect == "destructionOptions"){
                      option = destructionOptions;
                  } else if (schoolSelect == "illusionOptions"){
                      option = illusionOptions;
                  } else if (schoolSelect == "mysticismOptions"){
                      option = mysticismOptions;
                  } else if (schoolSelect == "necromancyOptions"){
                      option = necromancyOptions;
                  } else if (schoolSelect == "restorationOptions"){
                      option = restorationOptions;
                  }


                  const m = new Dialog({
                      title: "Cast Spell",
                      content: `<form>
                                  <div>

                                      <div>
                                          <h2 style="text-align: center;">Select Spell to Cast</h2>
                                          <select id="selectSpellName">
                                              ${option.join("")}
                                          </select>

                                          <label style="float: right; margin-right: 5px; text-align: center;"><b>Skill Modifier: </b>
                                              <input style="width: 60px;" type="number" value="0" id="playerInput"/>
                                          </label>
                                      </div>

                                          <hr>

                                              <div>
                                                  <label>
                                                      <input type="checkbox" id="Restraint"/>
                                                      <b>Spell Restraint:</b> <i>Reduces cost of spell by WP Bonus</i>
                                                  </label>
                                              </div>


                                              <div>
                                                  <label>
                                                      <input type="checkbox" id="Overload"/>
                                                      <b>Overload:</b> <i>Additional effects if not Restrained</i>
                                                  </label>
                                              </div>

                                              ${magickaCyclingOption}

                                              ${overchargeOption}

                                          <hr>

                                  </div>
                                </form>`,
                      buttons: {
                          one: {
                              label: "Cast Spell",
                              callback: html => {
                                  const selectSpellName = html.find(`[id="selectSpellName"]`).val();
                                  const castSpell = allSpells.find(i => i.name == selectSpellName);
                                  const spellDamage = castSpell.system.damage;
                                  const spellCost = castSpell.system.cost;
                                  let spellRestraint = 0;
                                  let stackCostMod = 0;

                                  //Assign Tags for Chat Output
                                  const isRestrained = html.find(`[id="Restraint"]`)[0].checked;
                                  const isOverloaded = html.find(`[id="Overload"]`)[0].checked;
                                  let isMagickaCycled = "";
                                  let isOvercharged = "";

                                  if (hasMagickaCycling){
                                      isMagickaCycled = html.find(`[id="MagickaCycling"]`)[0].checked;
                                  }

                                  if (hasOvercharge){
                                      isOvercharged = html.find(`[id="Overcharge"]`)[0].checked;
                                  }

                                  const tags = [];


                                  //Functions for Spell Modifiers
                                  if (isRestrained){
                                      let restraint = `<span style="border: none; border-radius: 30px; background-color: rgba(29, 97, 187, 0.80); color: white; text-align: center; font-size: xx-small; padding: 5px;">Restraint</span>`;
                                      tags.push(restraint);

                                      //Determine cost mod based on talents and other modifiers
                                      if (hasCreative && castSpell.system.spellType === "unconventional"){
                                          stackCostMod = stackCostMod - 1;
                                      }

                                      if (hasMethodical && castSpell.system.spellType === "conventional"){
                                          stackCostMod = stackCostMod - 1;
                                      }

                                      if(hasForceOfWill){
                                          stackCostMod = stackCostMod - 1;
                                      }

                                      spellRestraint = 0 - Math.floor(token.actor.system.characteristics.wp.total/10);
                                  }

                                  if (isOverloaded){
                                      let overload = `<span style="border: none; border-radius: 30px; background-color: rgba(161, 2, 2, 0.80); color: white; text-align: center; font-size: xx-small; padding: 5px;">Overload</span>`;
                                      tags.push(overload);
                                  }

                                  if (isMagickaCycled){
                                      let cycled = `<span style="border: none; border-radius: 30px; background-color: rgba(126, 40, 224, 0.80); color: white; text-align: center; font-size: xx-small; padding: 5px;">Magicka Cycle</span>`;
                                      tags.push(cycled);
                                      spellRestraint = 0 - (2 * Math.floor(token.actor.system.characteristics.wp.total/10));
                                  }

                                  //Determine Magic Skill for the Test
                                  let magicSkill = "";
                                  let magicSkillTarget = "";
                                  let magicSkillName = "";
                                  const skillModifier = parseInt(html.find(`[id="playerInput"]`).val());
                                  const magicSkillRoll = new Roll("1d100");
                                  magicSkillRoll.roll();

                                  let luckyNumber = token.actor.system.lucky_numbers;
                                  let unluckyNumber = token.actor.system.unlucky_numbers;
                                  let skillResult = "";
                                  let woundPenalty = token.actor.system.wounded ? token.actor.system.woundPenalty : 0

                                  // console.log(`Wound Penalty: ${woundPenalty}`)

                                  if (token.actor.type === "NPC"){
                                      magicSkill = token.actor.system.professions.magic;
                                      magicSkillName = "Magic Roll";
                                      magicSkillTarget = magicSkill + skillModifier + woundPenalty;

                                      if (magicSkillRoll.result == luckyNumber.ln1||magicSkillRoll.result == luckyNumber.ln2||magicSkillRoll.result == luckyNumber.ln3||magicSkillRoll.result == luckyNumber.ln4||magicSkillRoll.result == luckyNumber.ln5
                                          ||magicSkillRoll.result == luckyNumber.ln6||magicSkillRoll.result == luckyNumber.ln7||magicSkillRoll.result == luckyNumber.ln8||magicSkillRoll.result == luckyNumber.ln9||magicSkillRoll.result == luckyNumber.ln10){
                                          skillResult = `<span style='color:green; font-size:120%;'> <b>LUCKY NUMBER!</b></span>`
                                      } else if (magicSkillRoll.result == unluckyNumber.ul1||magicSkillRoll.result == unluckyNumber.ul2||magicSkillRoll.result == unluckyNumber.ul3||magicSkillRoll.result == unluckyNumber.ul4||magicSkillRoll.result == unluckyNumber.ul5){
                                          skillResult = `<span style='color:rgb(168, 5, 5); font-size:120%;'> <b>UNLUCKY NUMBER!</b></span>`
                                      } else {
                                          skillResult = `<b>${magicSkillRoll.result <= magicSkillTarget ? " <span style='color:green; font-size: 120%;'> <b>SUCCESS!</b></span>" : " <span style='color: rgb(168, 5, 5); font-size: 120%;'> <b>FAILURE!</b></span>"}`
                                      }

                                  } else {
                                      magicSkill = token.actor.items.find(i => i.type === "magicSkill" && i.name == schoolSelectName);
                                      magicSkillName = magicSkill.name;
                                      magicSkillTarget = magicSkill.system.value + skillModifier + woundPenalty;

                                      if (magicSkillRoll.result == luckyNumber.ln1||magicSkillRoll.result == luckyNumber.ln2||magicSkillRoll.result == luckyNumber.ln3||magicSkillRoll.result == luckyNumber.ln4||magicSkillRoll.result == luckyNumber.ln5){
                                          skillResult = `<span style='color:green; font-size:120%;'> <b>LUCKY NUMBER!</b></span>`
                                      } else if (magicSkillRoll.result == unluckyNumber.ul1||magicSkillRoll.result == unluckyNumber.ul2||magicSkillRoll.result == unluckyNumber.ul3||magicSkillRoll.result == unluckyNumber.ul4||magicSkillRoll.result == unluckyNumber.ul5){
                                          skillResult = `<span style='color:rgb(168, 5, 5); font-size:120%;'> <b>UNLUCKY NUMBER!</b></span>`
                                      } else {
                                          skillResult = `<b>${magicSkillRoll.result <= magicSkillTarget ? " <span style='color:green; font-size: 120%;'> <b>SUCCESS!</b></span>" : " <span style='color: rgb(168, 5, 5); font-size: 120%;'> <b>FAILURE!</b></span>"}`
                                      }
                                  }


                                  //If spell has damage value it outputs to Chat, otherwise no damage will be shown in Chat Output
                                  const damageRoll = new Roll(spellDamage);
                                  let damageEntry = "";

                                  if (spellDamage !== '' && spellDamage !== null){
                                      damageRoll.roll();
                                      damageEntry = `<label style="margin: 5px;">
                                                          <b>Damage: [[${damageRoll.result}]]</b> ${damageRoll.formula}</span>
                                                      </label>`
                                  }

                                  const hitLocRoll = new Roll("1d10");
                                  hitLocRoll.roll();
                                  let hitLoc = "";

                                  if (hitLocRoll.result <= 5) {
                                      hitLoc = "Body"
                                    } else if (hitLocRoll.result == 6) {
                                      hitLoc = "Right Leg"
                                    } else if (hitLocRoll.result == 7) {
                                      hitLoc = "Left Leg"
                                    } else if (hitLocRoll.result == 8) {
                                      hitLoc = "Right Arm"
                                    } else if (hitLocRoll.result == 9) {
                                      hitLoc = "Left Arm"
                                    } else if (hitLocRoll.result == 10) {
                                      hitLoc = "Head"
                                    }

                                  let displayCost = 0;
                                  let actualCost = spellCost + spellRestraint + stackCostMod;

                                  //Double Cost of Spell if Overcharge Talent is used
                                  if (isOvercharged){
                                      actualCost = actualCost * 2;
                                      let overcharge = `<span style="border: none; border-radius: 30px; background-color: rgba(219, 135, 0, 0.8); color: white; text-align: center; font-size: xx-small; padding: 5px;">Overcharge</span>`;
                                      tags.push(overcharge);
                                  }

                                  if (actualCost < 1){
                                      displayCost = 1;
                                  } else {
                                      displayCost = actualCost;
                                  }

                                  let contentString = `<h2 style="font-size: large; margin-top: 5px;"><img style="float: left; height: 24px; width: 24px; margin: 0 5px 5px 5px; border: none;" src=${castSpell.img}></im>${selectSpellName}</h2>
                                                   <div>
                                                      <label style="margin: 5px;">
                                                          <b>${magicSkillName} Target Number: [[${magicSkillTarget}]]</b>
                                                      </label>
                                                  </div>
                                                  <div>
                                                      <label style="margin: 5px;">
                                                          <b>${magicSkillName} Result: [[${magicSkillRoll.result}]]</b>
                                                      </label>
                                                  </div>
                                                  <hr>

                                                      <div style="text-align: center;">
                                                          <label style="margin: 5px;">
                                                              ${skillResult}
                                                          </label>
                                                      </div>
                                                   </div></b>

                                                   <hr>

                                                   <div>
                                                      ${damageEntry}
                                                      <p></p>
                                                      <label style="margin: 5px;">
                                                          <b>Hit Location: [[${hitLocRoll.result}]]</b> ${hitLoc}
                                                      </label>
                                                      <p></p>
                                                      <label style="margin: 5px;">
                                                          <b>Spell Cost: [[${displayCost}]]</b>
                                                          <p></p>
                                                          <span style="margin: 5px;"><i>Cost: ${spellCost} || Spell Restraint: ${spellRestraint} || Other: ${stackCostMod}</i></span>
                                                      </label>
                                                      <hr>
                                                      <label>
                                                          <b>Attributes:</b> ${castSpell.system.attributes}
                                                      </label>
                                                   </div>`

                                  ChatMessage.create({
                                      user: game.user.id,
                                      speaker: ChatMessage.getSpeaker(),

                                      flavor: tags.join(""),
                                      content: contentString,
                                      roll: magicSkillRoll
                                  })
                              }
                          },
                          two: {
                              label: "Cancel",
                              callback: html => console.log("Cancelled")
                          }
                      },
                      default: "one",
                      close: html => console.log()
                  });

                  m.render(true);
              }
          },
          two: {
              label: "Cancel",
              callback: html => console.log("Cancelled")
          }
      },
      default: "one",
      close: html => console.log()
  });


  d.render(true);
folder: null
sort: 0
flags:
  core:
    sourceId: Compendium.uesrpg-3ev4.macros.W3OLyTDgtuemN7Wv
_id: 1VsIxQsfKl2XRNBx
_stats:
  coreVersion: '12.331'
  systemId: null
  systemVersion: null
  createdTime: null
  modifiedTime: null
  lastModifiedBy: null
  compendiumSource: null
  duplicateSource: null
ownership:
  default: 0
  mPl8OlEMbxuodWQX: 3
  qHu63cXcLaUEJKkt: 3
_key: '!macros!1VsIxQsfKl2XRNBx'

