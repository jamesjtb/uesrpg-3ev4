name: All-In-One Combat
type: script
author: U7r9uXVolIFyJo7l
img: icons/skills/melee/weapons-crossed-swords-yellow.webp
scope: global
command: >-
  // Select Combat Style and Roll For It + Damage Roll Option


  if (token.actor.type === 'character') {
      const combatStyles = token.actor.items.filter(i => i.type === 'combatStyle')

      // Sort Combat Styles List
      combatStyles.sort((a, b) => {
          let nameA = a.name.toUpperCase()
          let nameB = b.name.toUpperCase()

          if (nameA < nameB) {return -1}
          else if (nameA > nameB) {return 1}
      })

      // Create Combat Style HTML Option Elements and push into Array
      let combatOptionArray = [];

      for (let style of combatStyles) {
          let option = `<option>${style.name} - ${style.system.value}%</option>`
          combatOptionArray.push(option)
      }


      // Grab Weapons Array
      const weapons = token.actor.items.filter(i => i.type === 'weapon')

      // Sort Weapons Array
      weapons.sort((a,b) => {
          let nameA = a.name.toUpperCase()
          let nameB = b.name.toUpperCase()

          if (nameA < nameB) {return -1}
          else if (nameA > nameB) {return 1}
      })

      // Create Weapon HTML Option Elements and push into array
      let weaponOptions = [];

      for (let weapon of weapons) {
          let option = `<option>${weapon.name}</option>`
          weaponOptions.push(option)
      }



      // Create Dialog Box
      const d = new Dialog({
          title: 'Character Combat Roll',
          content: `<form>
                      <div style="display: flex; flex-direction: column; padding: 10px;">

                          <div style='text-align: center;'>
                              <h2>Select a Combat Style</h2>
                          </div>

                          <div style='display: flex; justify-content: center; align-items: center; text-align: center; padding: 10px;'>
                              <div>
                                  <label>Combat Styles</label>
                                  <select id="combatStyleSelect">
                                      ${combatOptionArray.join('')}
                                  </select>
                              </div>

                              <div>
                                  <label>Modifier</label>
                                  <input id="modifier" type="number" value="0">
                              </div>
                          </div>

                          <div style="display: flex; justify-content: center; align-items: center;">
                              <input id="rollDamage" type="checkbox" onclick="showWeaponsList()">
                              <label>Roll Damage</label>
                          </div>

                          <div id="weaponDiv" style="display: none; justify-content: center; align-items: center; flex-direction: column; margin: 10px 0;">
                              <label>Select Weapon</label>
                              <select id="weaponSelect">
                                  ${weaponOptions.join('')}
                              </select>
                          </div>

                      </div>

                      <script>
                          function showWeaponsList() {
                              let rollDamage = document.querySelector('#rollDamage').checked
                              let weaponDiv = document.querySelector('#weaponDiv')

                              if (rollDamage) {
                                  weaponDiv.style.display = 'flex'
                              }
                              else {
                                  weaponDiv.style.display = 'none'
                              }
                          }
                      </script>
                  </form>`,
          buttons: {
              one: {
                  label: 'Roll',
                  callback: html => {

                      // Grab values from dialog box
                      const selectedStyle = token.actor.items.find(i => i.name === (document.querySelector('#combatStyleSelect').value).split(' - ')[0])
                      const modifier = Number(document.querySelector('#modifier').value)
                      const rollDamage = document.querySelector('#rollDamage').checked
                      const selectedWeapon = token.actor.items.find(i => i.name === document.querySelector('#weaponSelect').value)

                      // Set Lucky Num Shortcuts & Wounded Status
                      const luckyNums = token.actor.system.lucky_numbers
                      const luckyNumArray = [luckyNums.ln1, luckyNums.ln2, luckyNums.ln3, luckyNums.ln4, luckyNums.ln5]
                      const unluckyNums = token.actor.system.unlucky_numbers
                      const unluckyNumArray = [unluckyNums.ul1, unluckyNums.ul2, unluckyNums.ul3, unluckyNums.ul4, unluckyNums.ul5]
                      let woundStatus = token.actor.system.wounded
                      let woundPenalty;
                      woundStatus ? woundPenalty = Number(token.actor.system.woundPenalty) : woundPenalty = 0;

                      // Target Number Calculation
                      let targetNum = selectedStyle.system.value + modifier + woundPenalty

                      // Create Tags for display in Chat Message
                      let woundTag;
                      if (woundStatus) {woundTag = `<div style="border-radius: 10px; background-color: darkred; color: white; margin: 5px 0; padding: 5px; font-size: x-small;">Wounded</div>`}

                      // Set Combat Roll
                      const combatRoll = new Roll('1d100')
                      combatRoll.roll()

                      // Set Damage Roll
                      let damage;
                      let damageDiv;
                      let damageFlavor;
                      let hitLocDiv;

                      if (rollDamage) {
                          if (selectedWeapon !== undefined||selectedWeapon !== null) {
                              selectedWeapon.system.weapon2H ? damage = selectedWeapon.system.damage2 : damage = selectedWeapon.system.damage
                          }

                          // Hit Location Calculation & Div Creation
                          const hitLocRoll = new Roll('1d10')
                          hitLocRoll.roll()
                          let hitLoc;

                          if (hitLocRoll.result <= 5) {
                              hitLoc = "Body"
                            } else if (hitLocRoll.result  == 6) {
                              hitLoc = "Right Leg"
                            } else if (hitLocRoll.result  == 7) {
                              hitLoc = "Left Leg"
                            } else if (hitLocRoll.result == 8) {
                              hitLoc = "Right Arm"
                            } else if (hitLocRoll.result  == 9) {
                              hitLoc = "Left Arm"
                            } else if (hitLocRoll.result  == 10) {
                              hitLoc = "Head"
                            }
                          
                          hitLocDiv = `${hitLoc}`

                          // Weapon Damage Div Creation
                          const weaponDamage = new Roll(damage)
                          weaponDamage.roll()

                          if (damage !== undefined||damage !== null) {
                              damageDiv = `<div style="padding: 5px 0;"><label><b>Damage: [[${weaponDamage.result}]]</b> ${hitLocDiv}</label></div>`
                              damageFlavor = `<div>Weapon: ${selectedWeapon.name}</div>`
                          }
                      }


                      // Set label if Lucky/Unlucky Result
                      let rollResultLabel;

                      for (let num of luckyNumArray) {
                          if (num == combatRoll.result) {rollResultLabel = `<div style='color:green; font-size: 120%;'> <b>LUCKY NUMBER!</b></div>`}
                      }

                      for (let num of unluckyNumArray) {
                          if (num == combatRoll.result) {rollResultLabel = `<div style='color: rgb(168, 5, 5); font-size: 120%;'> <b>UNLUCKY NUMBER!</b></div>`}
                      }

                      if (rollResultLabel == undefined||rollResultLabel == null) {
                          combatRoll.result <= targetNum ? rollResultLabel = " <div style='color:green; font-size: 120%;'> <b>SUCCESS!</b></div>" : rollResultLabel = " <div style='color: rgb(168, 5, 5); font-size: 120%;'> <b>FAILURE!</b></div>"
                      }



                      // Create HTML for Chat Message
                      const content = `<div style="display: flex; justify-content: start">
                                          ${woundTag !== undefined ? woundTag : ''}
                                      </div>
                                      <div>
                                          <h2 style="font-size: large"><img src="${selectedStyle.img}" height="20" width="20" style="margin-right: 5px;"></img>${selectedStyle.name}</h2>
                                          <div style="padding: 5px 0; display: flex; flex-direction: column; justify-content: space-between;">
                                              <div style="padding: 5px 0;"><b><label>Target: </label>[[${targetNum}]]</b></div>
                                              <div style="padding: 5px 0;"><b><label>Result: </label>[[${combatRoll.result}]]</b></div>
                                              ${rollDamage ? damageDiv : `<span></span>`}
                                          </div>
                                          <div style="padding: 5px 0;">
                                              ${rollResultLabel}
                                          </div>
                                      </div>`

                      // Create Chat Message
                      ChatMessage.create({
                          user: game.user.id,
                          speaker: ChatMessage.getSpeaker(),
                          
                          flavor: `Modifier: ${modifier} ${rollDamage ? damageFlavor : `<span></span>`}`,
                          content: content,
                          roll: combatRoll
                      })

                      
                  }
              },
              two: {
                  label: 'Cancel',
                  callback: html => console.log("cancelled")
              }
          },
          default: 'one',
          close: html => console.log()
      })
      d.render(true)
  }


  else {ui.notifications.error('This Macro will only work with Character type
  actors')}
folder: null
sort: 0
flags:
  core:
    sourceId: Macro.ymC8HGnimCfeDUhj
_id: 55aBHMLuPB1SKwFG
_stats:
  coreVersion: '12.331'
  systemId: null
  systemVersion: null
  createdTime: null
  modifiedTime: null
  lastModifiedBy: null
  compendiumSource: null
  duplicateSource: null
ownership:
  default: 0
  U7r9uXVolIFyJo7l: 3
_key: '!macros!55aBHMLuPB1SKwFG'

